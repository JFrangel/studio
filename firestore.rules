/**
 * @fileoverview Firestore Security Rules for ChatStatus application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-centric security model. Users have full control over their profiles and notifications.
 * Access to chats and messages is limited to participants only. Administrative privileges are granted based on document
 * existence in the /roles_admin collection.  The rules prioritize simplicity and security, favoring explicit checks
 * over complex data validation during this prototyping phase.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves and admins.
 * - /chats/{chatId}: Stores chat metadata, accessible to chat participants.
 * - /chats/{chatId}/messages/{messageId}: Stores messages within a chat, accessible only to chat participants.
 * - /users/{userId}/notifications/{notificationId}: Stores notifications for a user, accessible only to the user.
 * - /roles_admin/{userId}:  A document existing in this collection grants the user admin privileges.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied by not providing a `list` rule on the `/users` collection.
 * - The existence of a document in `/roles_admin/{userId}` grants admin privileges.
 * - Default security posture is strict: If a relationship or access pattern is ambiguous, access is denied.
 *
 * Denormalization for Authorization:
 * - The `chats/{chatId}` documents contain a `participantIds` array to determine chat membership. This avoids costly `get()` calls to a separate membership collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the user or an admin can access their data.
     * @path /users/{userId}
     * @allow (create, get, update, delete, list) if the user is the owner (userId == request.auth.uid).
     * @deny (create, get, update, delete, list) if the user is not the owner.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isSignedIn(); // Permitir leer cualquier usuario si estás autenticado
      allow list: if isSignedIn(); // Permitir listar usuarios si estás autenticado
      allow create: if isSignedIn(); // Permitir crear tu propio perfil
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }

    /**
     * @description Secure chat metadata. Only participants can access chat details.
     * @path /chats/{chatId}
     * @allow (get, list) if the user is a participant.
     * @allow (create) if the user is in the participantIds array being created.
     * @allow (update, delete) if the user is the creator.
     * @deny any operation if the user is not a participant or creator.
     * @principle Enforces chat membership for access.
     */
    match /chats/{chatId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isParticipant() {
        return isSignedIn() && request.auth.uid in resource.data.participantIds;
      }

      function isParticipantInNewChat() {
        return isSignedIn() && request.auth.uid in request.resource.data.participantIds;
      }

      function isChatCreator() {
          return isSignedIn() && request.auth.uid == resource.data.createdBy;
      }

      function isChatAdmin() {
        return isSignedIn() && 
               resource.data.adminIds != null && 
               request.auth.uid in resource.data.adminIds;
      }

      allow get: if isParticipant();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isParticipantInNewChat();
      allow update: if isParticipant(); // Permitir a cualquier participante actualizar (para lastMessage y acciones personales)
      allow delete: if isChatAdmin(); // Solo administradores pueden eliminar el grupo
    }

    /**
     * @description Secure messages within a chat. Only chat participants can access messages.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (get, list) if the user is a participant in the chat.
     * @allow (create) if the user is a participant in the chat.
     * @allow (update, delete) if the user is the sender and the chat participant.
     * @deny any operation if the user is not a participant.
     * @principle Enforces chat membership for message access.
     */
    match /chats/{chatId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isParticipant(chatId) {
        let chatDoc = get(/databases/$(database)/documents/chats/$(chatId));
        return isSignedIn() && 
               chatDoc != null && 
               request.auth.uid in chatDoc.data.participantIds;
      }

      function isSender(messageId) {
        return isSignedIn() && request.auth.uid == resource.data.senderId;
      }

      allow get: if isParticipant(chatId);
      allow list: if isParticipant(chatId);
      allow create: if isParticipant(chatId);
      allow update: if isSender(messageId) && isParticipant(chatId);
      allow delete: if isSender(messageId) && isParticipant(chatId);
    }

    /**
     * @description Secure notifications for a user. Only the user can access their notifications.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create, get, update, delete, list) if the user is the owner (userId == request.auth.uid).
     * @deny (create, get, update, delete, list) if the user is not the owner.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/notifications/{notificationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

     /**
      * @description Grants admin privileges to the user if a document exists with their ID.
      * @path /roles_admin/{userId}
      * @allow get: if false;
      * @allow list: if false;
      * @allow create: if false;
      * @allow update: if false;
      * @allow delete: if request.auth.uid == userId;
      * @principle Restricts access to admin role management.
      */
    match /roles_admin/{userId} {
        function isAdmin() {
          return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }
        allow get: if isAdmin();
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if request.auth.uid == userId;
    }
  }
}